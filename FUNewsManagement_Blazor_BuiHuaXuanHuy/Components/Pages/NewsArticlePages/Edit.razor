@page "/newsarticles/edit/{NewsArticleId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using BO
@using Repo
@using System.Security.Claims
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Edit News Article</PageTitle>

<h1>Edit News Article</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="NewsArticle" OnValidSubmit="UpdateNewsArticle" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="newstitle" class="form-label">News Title:</label>
                <InputText id="newstitle" @bind-Value="NewsArticle.NewsTitle" class="form-control" />
                <ValidationMessage For="() => NewsArticle.NewsTitle" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="headline" class="form-label">Headline:</label>
                <InputText id="headline" @bind-Value="NewsArticle.Headline" class="form-control" />
                <ValidationMessage For="() => NewsArticle.Headline" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="createddate" class="form-label">Created Date:</label>
                <InputDate id="createddate" @bind-Value="NewsArticle.CreatedDate" class="form-control" disabled />
                <ValidationMessage For="() => NewsArticle.CreatedDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="newscontent" class="form-label">News Content:</label>
                <InputText id="newscontent" @bind-Value="NewsArticle.NewsContent" class="form-control" />
                <ValidationMessage For="() => NewsArticle.NewsContent" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="newssource" class="form-label">News Source:</label>
                <InputText id="newssource" @bind-Value="NewsArticle.NewsSource" class="form-control" />
                <ValidationMessage For="() => NewsArticle.NewsSource" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="categoryid" class="form-label">Category:</label>
                <InputNumber id="categoryid" @bind-Value="NewsArticle.CategoryId" class="form-control" />
                <ValidationMessage For="() => NewsArticle.CategoryId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="newsstatus" class="form-label">News Status:</label>
                <InputCheckbox id="newsstatus" @bind-Value="NewsArticle.NewsStatus" class="form-check-input" />
                <ValidationMessage For="() => NewsArticle.NewsStatus" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Save Changes</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/newsarticles">Back to List</a>
</div>

@code {
    private NewsArticle NewsArticle { get; set; } = new();
    private string? UserId { get; set; }

    [Parameter] public int NewsArticleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        UserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.PrimarySid)?.Value;

        if (NewsArticleId != 0)
        {
            var repository = UnitOfWork.GetRepository<NewsArticle>();
            NewsArticle = await repository.GetByIdAsync(NewsArticleId);
            if (NewsArticle == null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
    }

    private async Task UpdateNewsArticle()
    {
        if (UserId == null)
        {
            Console.WriteLine("Unauthorized user.");
            return;
        }

        NewsArticle.UpdatedById = short.Parse(UserId);
        NewsArticle.ModifiedDate = DateTime.UtcNow;

        var repository = UnitOfWork.GetRepository<NewsArticle>();
        repository.Update(NewsArticle);
        await UnitOfWork.SaveAsync();

        NavigationManager.NavigateTo("/newsarticles");
    }
}
