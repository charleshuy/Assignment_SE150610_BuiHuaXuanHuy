@page "/newsarticles"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using BO
@using Repo
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>News Articles</PageTitle>

<h1>News Articles</h1>

<AuthorizeView Roles="1">
    <Authorized Context="authContext">
        <p>
            <a href="newsarticles/create">Create New</a>
        </p>

        <div class="w-100">
            <EditForm method="post" Model="searchModel" OnValidSubmit="ApplySearchFilter" FormName="search-form" Enhance>
                <InputText id="newstitle" @bind-Value="searchModel.SearchTerm" class="form-control" />
                <button type="submit">Search</button>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>

<table class="table">
    <thead>
        <tr>
            <th>News Title</th>
            <th>Category</th>
            <th>Created Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var newsarticle in FilteredNewsArticles)
        {
            <tr>
                <td>@newsarticle.NewsTitle</td>
                <td>@newsarticle.Category?.CategoryName</td>
                <td>@newsarticle.CreatedDate</td>
                <td>
                    <a href="@($"newsarticles/details?newsarticleid={newsarticle.NewsArticleId}")">Details</a>
                    <AuthorizeView Roles="1">
                        <Authorized>
                            | <a href="@($"newsarticles/edit?newsarticleid={newsarticle.NewsArticleId}")">Edit</a> |
                            <a href="@($"newsarticles/delete?newsarticleid={newsarticle.NewsArticleId}")">Delete</a>
                        </Authorized>
                    </AuthorizeView>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<NewsArticle> NewsArticles { get; set; } = new();
    private List<NewsArticle> FilteredNewsArticles { get; set; } = new();
    private SearchModel searchModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var newsArticleRepo = UnitOfWork.GetRepository<NewsArticle>();
        NewsArticles = (await newsArticleRepo.GetAllAsync()).ToList();
        ApplySearchFilter();
    }

    private void ApplySearchFilter()
    {
        if (string.IsNullOrEmpty(searchModel.SearchTerm))
        {
            FilteredNewsArticles = NewsArticles.ToList();
        }
        else
        {
            FilteredNewsArticles = NewsArticles
                .Where(x => x.NewsTitle.Contains(searchModel.SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    public class SearchModel
    {
        public string SearchTerm { get; set; } = string.Empty;
    }
}
